/*
*  ItemRestriction v1.1.2.0
*     by Bannar
*
*  For restricting or limiting items from being equipped.
*/
package ItemRestriction
import HashMap
import LinkedList
import UnitIndexer
import RegisterEvents
import Orders

@configurable function getUnitTypeErrorMessage(UnitRequirement _requirement, int _unitId) returns string
    return "This item can not be hold by this unit type."

@configurable function getLevelErrorMessage(UnitRequirement _requirement, int level) returns string
    return "This item requires level " + level.toString() + " to be picked up."

@configurable function getStatisticErrorMessage(UnitRequirement _requirement, int value, string statistic) returns string
    return "This item requires " + value.toString() + " " + statistic + "."

@configurable function getLimitErrorMessage(ItemRestriction restriction, int limit) returns string
    return "This unit can not hold more than " + limit.toString() + " item(s) of \"" + restriction.name + "\" type."

@configurable function getExclusiveErrorMessage(ItemRestriction first, ItemRestriction second) returns string
    return "This unit cannot hold items of type \"" + first.name + "\" and \"" + second.name + "\" at the same time."

@configurable function getForbiddenErrorMessage(ItemRestriction _restriction) returns string
    return "This item can not be picked up by this unit."

@configurable function printErrorMessage(player whichPlayer, string message)
    printTimedToPlayer(message, 2, whichPlayer)

public interface UnitRequirementPredicate
    /** Returns null on success or error message if unit does not meet predicate criteria. */
    function isMet(unit whichUnit) returns string

/** Set of unit-specific requirements. */ 
public class UnitRequirement
    /** Unit level requirement. */
    var level = 0
    /** Hero strength requirement. */
    var strength = 0
    /** Hero agility requirement. */
    var agility = 0
    /** Hero intelligence requirement. */
    var intelligence = 0
    /** Whether to include bonuses when checking unit statistics. */
    var includeBonuses = false
    /** Name associated with requirement. */
    string name

    /** Unit type requirement. Omitted if empty. */
    private constant units = new LinkedList<int>()
    private constant conditions = new LinkedList<UnitRequirementPredicate>()

    construct(string name)
        this.name = name

    ondestroy
        destroy units
        destroy conditions

    /** Whether specified unit type is a part of requirement. */
    function has(int unitTypeId) returns boolean
        return units.contains(unitTypeId)

    /** Sets hero statistic requirements to specified values. */
    function requireStat(int str, int agi, int intel)
        strength = str
        agility = agi
        intelligence = intel

    /** Returns unit type requirement list. */
    function getUnits() returns LinkedList<int>
        return units.copy()

    /** Adds specified unit type to requirement criterias. */
    function addUnit(int unitTypeId)
        if unitTypeId > 0 and not units.contains(unitTypeId)
            units.push(unitTypeId)

    /** Removes specified unit type from requirement criterias. */
    function removeUnit(int unitTypeId)
        if unitTypeId > 0 and units.contains(unitTypeId)
            units.remove(unitTypeId)

    /** Adds new criteria to requirement criterias. */
    function addCondition(UnitRequirementPredicate predicate)
        if predicate != null
            conditions.add(predicate)

    /** Removes specified condition from requirement criterias. */
    function removeCondition(UnitRequirementPredicate predicate)
        if predicate != null
            conditions.remove(predicate)

    /** Validates whether specified unit meets this unit requirements. */
    function test(unit whichUnit) returns string
        var unitTypeId = whichUnit.getTypeId()

        if not units.isEmpty() and not has(unitTypeId)
            return getUnitTypeErrorMessage(this, unitTypeId)
        if level > 0 and whichUnit.getLevel() < level
            return getLevelErrorMessage(this, level)
        if strength > 0 and whichUnit.getStr(includeBonuses) < strength
            return getStatisticErrorMessage(this, strength, "Strength")
        if agility > 0 and whichUnit.getAgi(includeBonuses) < agility
            return getStatisticErrorMessage(this, agility, "Agility")
        if intelligence > 0 and whichUnit.getInt(includeBonuses) < intelligence
            return getStatisticErrorMessage(this, intelligence, "Intelligence")

        for condition in conditions
            var errorMessage = condition.isMet(whichUnit)
            if errorMessage != null
                return errorMessage

        return null

    /** Returns value indicating whether specified unit successfully passed requirement test. */
    function filter(unit whichUnit) returns bool
        return test(whichUnit) == null

public class LimitException
    UnitRequirement requirement
    int newLimit

    construct(UnitRequirement requirement, int newLimit)
        this.requirement = requirement
        this.newLimit = newLimit

/** Allows to restrict or limit the number of item equipped by unit. */
public class ItemRestriction
    /** Name associated with restriction. */
    string name
    /** Maximum number of items a unit can carry. */
    int limit
    /** Requirement a unit must meet to hold items. */
    UnitRequirement requirement = null

    protected constant table = new Table()
    private constant items = new LinkedList<int>()
    private constant exceptions = new LinkedList<LimitException>()
    private constant exclusives = new LinkedList<ItemRestriction>()
    // For extra speed, each item type involved will have separate list assigned
    private static constant instanceMap = new HashMap<int, LinkedList<ItemRestriction>>()

    private static function saveRestriction(int index, ItemRestriction recipe)
        if not instanceMap.has(index)
            instanceMap.put(index, new LinkedList<ItemRestriction>())
        var restrictions = instanceMap.get(index)
        if not restrictions.contains(recipe)
            restrictions.push(recipe)

    private static function flushRestriction(int index, ItemRestriction recipe)
        var restrictions = instanceMap.get(index)
        restrictions.remove(recipe)
        if restrictions.isEmpty()
            destroy restrictions
            instanceMap.remove(index)

    /** Returns restrictions associated with specified item type. */
    static function getRestrictions(int index) returns LinkedList<ItemRestriction>
        LinkedList<ItemRestriction> result = null
        if instanceMap.has(index)
            result = instanceMap.get(index)
        return result

    construct(string name, int limit)
        this.name = name
        this.limit = limit
        // Global instance list for handling deindex event
        saveRestriction(0, this)

    ondestroy
        flushRestriction(0, this)
        items.forEach(e -> flushRestriction(e, this))
        exclusives.forEach(e -> e.exclusives.remove(this))

        destroy table
        destroy items
        destroy exceptions
        destroy exclusives

    /** Whether specified item type is a part of restriction. */
    function has(int itemTypeId) returns boolean
        return items.contains(itemTypeId)

    /** Remove specified item type from this restriction. */
    function removeItem(int itemTypeId)
        if has(itemTypeId)
            items.remove(itemTypeId)
            flushRestriction(itemTypeId, this)

    /** Add specified item type to this restriction. */
    function addItem(int itemTypeId)
        if itemTypeId > 0 and not has(itemTypeId)
            items.push(itemTypeId)
            saveRestriction(itemTypeId, this)

    /** Removes item limit exception for specified requirement. */
    function removeException(UnitRequirement requirement)
        var iter = exceptions.iterator()
        for exception from iter
            if exception.requirement == requirement
                iter.remove()
                destroy exception
                break
        iter.close()

    /** Adds new item limit exception for specified requirement. */
    function addException(UnitRequirement requirement, int newLimit)
        if requirement != null
            for exception from exceptions.staticItr()
                if exception.requirement == requirement
                    return
            exceptions.push(new LimitException(requirement, newLimit))
    
    /** Makes specified restriction non-exclusive with this restriction. */
    function removeExclusive(ItemRestriction restriction)
        if exclusives.contains(restriction)
            exclusives.remove(restriction)
            restriction.exclusives.remove(this)
    
    /** Makes specified restriction exclusive with this restriction. */
    function addExclusive(ItemRestriction restriction)
        if restriction != null and not exclusives.contains(restriction)
            exclusives.push(restriction)
            restriction.exclusives.push(this)

    /** Item types that enforce this restriction. */
    function getItems() returns LinkedList<int>
        return items.copy()

    /** Collection of UnitRequirement instances that may define different limits.
        Example: berserker may carry two 2H-weapons, rather than one. */
    function getExceptions() returns LinkedList<LimitException>
        return exceptions.copy()

    /** Collection of ItemRestriction instances that exclude each other from being picked.
        Example: a unit cannot carry both 1H-weapons and 2H-weapons at the same time. */
    function getExclusives() returns LinkedList<ItemRestriction>
        return exclusives.copy()

    protected function getCount(int index) returns int
        return table.loadInt(index)

    protected function incCount(int index)
        table.saveInt(index, getCount(index) + 1)

    protected function decCount(int index)
        table.saveInt(index, getCount(index) - 1)

    protected function getException(int index) returns LimitException
        return table.loadInt(-index) castTo LimitException

    protected function setException(int index, LimitException exception)
        table.saveInt(-index, exception castTo int)

    /** Returns related to this restriction, current item count for specified unit. */
    function getCount(unit whichUnit) returns int
        return getCount(whichUnit.getIndex())

    /** Returns currently chosen limit exception if any for specified unit. */
    function getException(unit whichUnit) returns LimitException
        return getException(whichUnit.getIndex())

    /** Validates whether specified unit can hold specified itm given the restriction criteria. */
    function test(unit whichUnit, item whichItem) returns string
        if not has(whichItem.getTypeId())
            return null
        else if requirement != null
            var errorMessage = requirement.test(whichUnit)
            if errorMessage != null
                return errorMessage

        var index = whichUnit.getIndex()
        for exclusive in exclusives
            if exclusive.getCount(index) > 0
                return getExclusiveErrorMessage(this, exclusive)

        var threshold = limit
        if not exceptions.isEmpty()
            var exception = getException(index)
            if exception == null or not exceptions.contains(exception)
                table.removeInt(-index) // clear assigned exception if any

                var iter = exceptions.iterator()
                while iter.hasNext()
                    exception = iter.next()
                    if exception.requirement.filter(whichUnit)
                        threshold = exception.newLimit
                        setException(index, exception)
                        break
                iter.close()
            else
                threshold = exception.newLimit

        if threshold <= 0
            return getForbiddenErrorMessage(this)
        if getCount(index) >= threshold
            return getLimitErrorMessage(this, threshold)
        return null
    
    /** Returns value indicating whether specified unit successfully passed restriction test for specified item. */
    function filter(unit whichUnit, item whichItem) returns bool
        return test(whichUnit, whichItem) == null

// Returns null (not allowed), empty list (no restrictions) or non-empty list (restrictions to increase count for).
// Caller is responsible for destroying retrieved list if any
function evaluateRestrictions(unit u, item itm) returns LinkedList<ItemRestriction>
    var result = new LinkedList<ItemRestriction>()
    var restrictions = ItemRestriction.getRestrictions(itm.getTypeId())

    if restrictions != null
        for restriction in restrictions
            var errorMessage = restriction.test(u, itm)
            if errorMessage != null
                printErrorMessage(u.getOwner(), errorMessage)
                destroy result
                result = null
                break
            result.push(restriction)
    return result

function onPickup()
    var itm = GetManipulatedItem()
    if not itm.isPowerup()
        var u = GetTriggerUnit()
        var associated = evaluateRestrictions(u, itm)

        if associated != null
            var index = u.getIndex()
            associated.forEach(e -> e.incCount(index))
            destroy associated
        else
            var t = getPlayerUnitEventTrigger(EVENT_PLAYER_UNIT_DROP_ITEM)
            t.disable()
            u.removeItem(itm)
            t.enable()

function onDrop()
    var itemTypeId = GetManipulatedItem().getTypeId()
    var restrictions = ItemRestriction.getRestrictions(itemTypeId)

    if restrictions != null
        var index = GetTriggerUnit().getIndex()
        for restriction from restrictions.staticItr()
            var count = restriction.getCount(index)
            if count > 0
                restriction.decCount(index)

function onTargetOrder()
    var itm = GetOrderTargetItem()
    if GetIssuedOrderId() == SpecialOrders.smart and itm != null
        var u = GetTriggerUnit()
        var associated = evaluateRestrictions(u, itm)
        if associated == null
            u.abortOrder()
        else
            destroy associated

function onDeindex()
    var index = getDeindexedUnit().getIndex()
    var restrictions = ItemRestriction.getRestrictions(0)

    if restrictions != null
        for restriction from restrictions.staticItr()
            if restriction.table.hasInt(index)
                restriction.table.flush()

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, () -> onPickup())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM, () -> onDrop())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> onTargetOrder())
    onUnitDeindex(() -> onDeindex())
