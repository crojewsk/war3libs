package InventoryEventDemo
import InventoryEvent
import ClosureTimers

function onInventoryMove()
    unit u = getInventoryManipulatingUnit()
    item itm = getInventoryManipulatedItem()
    item itmSwapped = getInventorySwappedItem()
    int slotFrom = getInventorySlotFrom()
    int slotTo = getInventorySlotTo()
    string s

    if itmSwapped != null
        s = u.getName() + " swapped " + itm.getName() + "[" + slotFrom.toString() + "] with "
        s = s + itmSwapped.getName() + "[" + slotTo.toString() + "]"
    else
        s = u.getName() + " moved " + itm.getName() + "[" + slotFrom.toString() + "] to slot " + slotTo.toString()

    print(s)

function onInventoryUse()
    unit u = getInventoryManipulatingUnit()
    item itm = getInventoryManipulatedItem()
    int slotFrom = getInventorySlotFrom()
    string s

    s = u.getName() + " used " + itm.getName() + "[" + slotFrom.toString() + "]"
    print(s)

public function initInventoryEventDemo()
    registerInventoryEvent(EVENT_ITEM_INVENTORY_MOVE, () -> onInventoryMove())
    registerInventoryEvent(EVENT_ITEM_INVENTORY_USE, () -> onInventoryUse())
    doAfter(1.) ->
        real x = -200
        real y = -200
        CreateItem('bspd', x, y) // Boots
        CreateItem('crys', x, y) // Crystall Ball
        CreateItem('infs', x, y) // Inferno
        CreateItem('ratc', x, y) // Claws of Attack
