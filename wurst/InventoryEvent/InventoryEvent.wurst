/*
*  InventoryEvent v1.0.1.0
*     by Bannar
*
*  For intuitive inventory event handling.
*/
package InventoryEvent
import RegisterEvents
import Orders

unit eventUnit = null
item eventItem = null
int eventSlotFrom = -1
int eventSlotTo = -1
trigger eventMovedTrigger = CreateTrigger()
trigger eventUsedTrigger = CreateTrigger()

public constant EVENT_ITEM_INVENTORY_MOVE = 1
public constant EVENT_ITEM_INVENTORY_USE = 2

/** Returns unit which manipulated event item. */
public function getInventoryManipulatingUnit() returns unit
    return eventUnit

/** Returns manupilated event item. */
public function getInventoryManipulatedItem() returns item
    return eventItem

/** Returns slot index of manipulated item from which it was moved or used. */
public function getInventorySlotFrom() returns int
    return eventSlotFrom

/** Returns slot index of manipulated item to which it was moved. */
public function getInventorySlotTo() returns int
    return eventSlotTo

/** Returns item which manipulated item switched position with if any. */
public function getInventorySwappedItem() returns item
    return eventUnit.itemInSlot(eventSlotTo)

public function registerInventoryEvent(int whichEvent, code cb)
    if whichEvent == EVENT_ITEM_INVENTORY_MOVE
        eventMovedTrigger.addCondition(Condition(cb))
    else if whichEvent == EVENT_ITEM_INVENTORY_USE
        eventUsedTrigger.addCondition(Condition(cb))

public function getInventoryEventTrigger(int whichEvent) returns trigger
    if whichEvent == EVENT_ITEM_INVENTORY_MOVE
        return eventMovedTrigger
    else if whichEvent == EVENT_ITEM_INVENTORY_USE
        return eventUsedTrigger
    return null

function fireEvent(trigger evt, unit u, item itm, integer slotFrom, integer slotTo)
    unit prevUnit = eventUnit
    item prevItem = eventItem
    int prevSlotFrom = eventSlotFrom
    int prevSlotTo = eventSlotTo

    eventUnit = u
    eventItem = itm
    eventSlotFrom = slotFrom
    eventSlotTo = slotTo

    evt.evaluate()

    eventUnit = prevUnit
    eventItem = prevItem
    eventSlotFrom = prevSlotFrom
    eventSlotTo = prevSlotTo

function onItemOrder()
    let order = GetIssuedOrderId()
    let u = GetTriggerUnit()
    item itm
    int slotFrom
    int slotTo

    if order >= SpecialOrders.itemdrag00 and order <= SpecialOrders.itemdrag05
        itm = GetOrderTargetItem()
        slotFrom = u.getItemSlot(itm)
        slotTo = order - SpecialOrders.itemdrag00
        fireEvent(eventMovedTrigger, u, itm, slotFrom, slotTo)
    else
        slotFrom = order - SpecialOrders.itemuse00
        itm = u.itemInSlot(slotFrom)
        fireEvent(eventUsedTrigger, u, itm, slotFrom, -1)

function onAnyOrder()
    let order = GetIssuedOrderId()
    if order >= SpecialOrders.itemdrag00 and order <= SpecialOrders.itemuse05
        onItemOrder()

init
    // MOVED is order of type TARGET_ORDER yet USED can be anyone of them
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, () -> onAnyOrder())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> onAnyOrder())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER, () -> onAnyOrder())
