/*
*  InventoryEvent v1.0.1.2
*     by Bannar
*
*  For intuitive inventory event handling.
*/
package InventoryEvent
import RegisterEvents
import Orders

tuple eventState(unit u, item itm, int slotFrom, int slotTo)

var eventData = eventState(null, null, -1, -1)
constant let eventMovedTrigger = CreateTrigger()
constant let eventUsedTrigger = CreateTrigger()

public enum EVENT_ITEM_INVENTORY
    MOVE
    USE

/** Returns unit which manipulated event item. */
public function getInventoryManipulatingUnit() returns unit
    return eventData.u

/** Returns manupilated event item. */
public function getInventoryManipulatedItem() returns item
    return eventData.itm

/** Returns slot index of manipulated item from which it was moved or used. */
public function getInventorySlotFrom() returns int
    return eventData.slotFrom

/** Returns slot index of manipulated item to which it was moved. */
public function getInventorySlotTo() returns int
    return eventData.slotTo

/** Returns item which manipulated item switched position with if any. */
public function getInventorySwappedItem() returns item
    return eventData.u.itemInSlot(eventData.slotTo)

public function registerInventoryEvent(EVENT_ITEM_INVENTORY whichEvent, code cb)
    switch whichEvent
        case EVENT_ITEM_INVENTORY.MOVE
            eventMovedTrigger.addCondition(Condition(cb))
        case EVENT_ITEM_INVENTORY.USE
            eventUsedTrigger.addCondition(Condition(cb))

public function getInventoryEventTrigger(EVENT_ITEM_INVENTORY whichEvent) returns trigger
    trigger result = null

    switch whichEvent
        case EVENT_ITEM_INVENTORY.MOVE
            result = eventMovedTrigger
        case EVENT_ITEM_INVENTORY.USE
            result = eventUsedTrigger
    return result

function fireEvent(trigger evt, eventState currState)
    var prevState = eventData
    eventData = currState
    evt.evaluate()
    eventData = prevState

function onItemOrder()
    var order = GetIssuedOrderId()
    var u = GetTriggerUnit()

    if order >= SpecialOrders.itemdrag00 and order <= SpecialOrders.itemdrag05
        var itm = GetOrderTargetItem()
        var slotFrom = u.getItemSlot(itm)
        var slotTo = order - SpecialOrders.itemdrag00
        fireEvent(eventMovedTrigger, eventState(u, itm, slotFrom, slotTo))
    else
        var slotFrom = order - SpecialOrders.itemuse00
        var itm = u.itemInSlot(slotFrom)
        fireEvent(eventUsedTrigger, eventState(u, itm, slotFrom, -1))

function onAnyOrder()
    var order = GetIssuedOrderId()
    if order >= SpecialOrders.itemdrag00 and order <= SpecialOrders.itemuse05
        onItemOrder()

init
    // MOVED is order of type TARGET_ORDER yet USED can be anyone of them
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, () -> onAnyOrder())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> onAnyOrder())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER, () -> onAnyOrder())
