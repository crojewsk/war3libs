/*
*  InventoryEvent v1.0.0.0
*     by Bannar
*
*  For intuitive inventory event handling.
*/
package InventoryEvent
import RegisterEvents
import Orders

unit eventUnit = null
item eventItem = null
int eventSlotFrom = -1
int eventSlotTo = -1
trigger eventMovedTrigger = CreateTrigger()
trigger eventUsedTrigger = CreateTrigger()

public constant EVENT_INVENTORY_MOVED = 0
public constant EVENT_INVENTORY_USED = 1

public function getInventoryManipulatingUnit() returns unit
    return eventUnit

public function getInventoryManipulatedItem() returns item
    return eventItem

public function getInventorySlotFrom() returns int
    return eventSlotFrom

public function getInventorySlotTo() returns int
    return eventSlotTo

public function getInventorySwappedItem() returns item
    return UnitItemInSlot(eventUnit, eventSlotTo)

public function registerInventoryEvent(int whichEvent, code cb)
    if whichEvent == EVENT_INVENTORY_MOVED
        eventMovedTrigger.addCondition(Condition(cb))
    else if whichEvent == EVENT_INVENTORY_USED
        eventUsedTrigger.addCondition(Condition(cb))

public function getInventoryEventTrigger(int whichEvent) returns trigger
    if whichEvent == EVENT_INVENTORY_MOVED
        return eventMovedTrigger
    else if whichEvent == EVENT_INVENTORY_USED
        return eventUsedTrigger
    return null

function fireEvent(trigger evt, unit u, item itm, integer slotFrom, integer slotTo)
    unit prevUnit = eventUnit
    item prevItem = eventItem
    int prevSlotFrom = eventSlotFrom
    int prevSlotTo = eventSlotTo

    eventUnit = u
    eventItem = itm
    eventSlotFrom = slotFrom
    eventSlotTo = slotTo

    evt.evaluate()

    eventUnit = prevUnit
    eventItem = prevItem
    eventSlotFrom = prevSlotFrom
    eventSlotTo = prevSlotTo

function onItemOrder()
    let order = GetIssuedOrderId()
    let u = GetTriggerUnit()
    item itm
    int slotFrom
    int slotTo

    if order >= SpecialOrders.itemdrag00 and order <= SpecialOrders.itemdrag05
        itm = GetOrderTargetItem()
        slotFrom = u.getItemSlot(itm)
        slotTo = order - SpecialOrders.itemdrag00
        fireEvent(eventMovedTrigger, u, itm, slotFrom, slotTo)
    else
        slotFrom = order - SpecialOrders.itemuse00
        itm = u.itemInSlot(slotFrom)
        fireEvent(eventUsedTrigger, u, itm, slotFrom, -1)

function onAnyOrder()
    let order = GetIssuedOrderId()
    if order >= SpecialOrders.itemdrag00 and order <= SpecialOrders.itemuse05
        onItemOrder()

init
    // MOVED is order of type TARGET_ORDER yet USED can be anyone of them
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, () -> onAnyOrder())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> onAnyOrder())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER, () -> onAnyOrder())
