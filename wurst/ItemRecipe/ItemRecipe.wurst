/*
*  ItemRecipe v1.0.2.2
*     by Bannar
*
*  Powerful item recipe creator.
*/
package ItemRecipe
import HashMap
import HashList
import LinkedList
import RegisterEvents
import ItemRestriction
import InventoryEvent
import SmoothItemPickup

// Global containers for associated recipe list retrieval
let recipeMap = new HashMap<int, LinkedList<ItemRecipe>>()
// Event related globals
ItemRecipe eventRecipe = null
unit eventUnit = null
item eventItem = null
HashList<RecipeIngredient> eventIngredients = null
trigger eventTrigger = CreateTrigger()

/** Returns triggering item recipe. */
public function getEventItemRecipe() returns ItemRecipe
    return eventRecipe

/** Returns recipe triggering unit. */
public function getEventItemRecipeUnit() returns unit
    return eventUnit

/** Returns reward item for triggering recipe. */
public function getEventItemRecipeItem() returns item
    return eventItem

/** Returns collection of ingredients chosen to assemble the reward item,
    where each index corresponds to triggering unit inventory slot. */
public function getEventItemRecipeIngredients() returns HashList<RecipeIngredient>
    return eventIngredients

/** Registers new event handler for item recipe event. */
public function registerItemRecipeEvent(code func)
    eventTrigger.addCondition(Condition(func))

/** Returns trigger handle associated with recipe event. */
public function getItemRecipeEventTrigger() returns trigger
    return eventTrigger

function fireEvent(ItemRecipe recipe, unit u, item itm, HashList<RecipeIngredient> ingredients)
    ItemRecipe prevRecipe = eventRecipe
    unit prevUnit = eventUnit
    item prevItem = eventItem
    let prevIngredients = eventIngredients

    eventRecipe = recipe
    eventUnit = u
    eventItem = itm
    eventIngredients = ingredients

    eventTrigger.evaluate()

    eventRecipe = prevRecipe
    eventUnit = prevUnit
    eventItem = prevItem
    eventIngredients = prevIngredients

/** Stores information about item required for recipe assembly. */
public class RecipeIngredient
    int itemTypeId
    boolean perishable
    int charges
    // If non 0, then it is part of a batch i.e multiple items can fill its spot
    int index

    construct(int itemTypeId, boolean perishable, int charges, int index)
        this.itemTypeId = itemTypeId
        this.perishable = perishable
        this.charges = charges
        this.index = index
    
    construct(thistype base)
        this.itemTypeId = base.itemTypeId
        this.perishable = base.perishable
        this.charges = base.charges
        this.index = base.index

/** Item recipe, collection of items that can be combined for powerful rewards. */
public class ItemRecipe
    private LinkedList<RecipeIngredient> ingredients
    private int reward
    int charges
    boolean ordered
    boolean permanent
    boolean pickupable
    UnitRequirement requirement
    private int abilityId
    private int count
    private boolean batch

    construct(int reward, int charges, boolean ordered, boolean permanent, boolean pickupable)
        ingredients = new LinkedList<RecipeIngredient>()
        this.reward = reward
        this.charges = charges
        this.ordered = ordered
        this.permanent = permanent
        this.pickupable = pickupable
        requirement = null
        abilityId = 0
        count = 0
        batch = false

        LinkedList<ItemRecipe> recipes
        if not recipeMap.has(-reward)
            recipes = new LinkedList<ItemRecipe>()
            recipes.push(this)
            recipeMap.put(-reward, recipes)
        else
            recipes = recipeMap.get(-reward)
            if not recipes.contains(this)
                recipes.push(this)

    ondestroy
        LinkedList<ItemRecipe> recipes
        int itemTypeId

        setAbility(0)

        for ingredient in ingredients
            itemTypeId = ingredient.itemTypeId
            recipes = recipeMap.get(itemTypeId)
            recipes.remove(this)
            if recipes.isEmpty()
                destroy recipes
                recipeMap.remove(itemTypeId)

        recipes = recipeMap.get(-reward)
        recipes.remove(this)
        if recipes.isEmpty()
            destroy recipes
            recipeMap.remove(-reward)

        destroy ingredients

    /** Number of items required for the recipe. */
    function count() returns int
        return count

    /** Whether specified item type is a part of the recipe. */
    function isIngredient(int itemTypeId) returns boolean
        for ingredient in ingredients
            if ingredient.itemTypeId == itemTypeId
                return true
        return false

    /** Returns shallow copy of item recipe data. */
    function getIngredients() returns LinkedList<RecipeIngredient>
        return new LinkedList<RecipeIngredient>(ingredients)

    /** Returns reward item type. */
    function getResult() returns int
        return reward

    /** Returns recipes which reward matches specified item type. */
    static function getRecipes(int itemTypeId) returns LinkedList<ItemRecipe>
        if recipeMap.has(-itemTypeId)
            return recipeMap.get(-itemTypeId)
        return null

    /** Returns first recipe which reward matches specified item type. */
    static function getRecipe(int itemTypeId) returns ItemRecipe
        let recipes = getRecipes(itemTypeId)
        if recipes != null
            return recipes.getFirst()
        return null

    /** Returns recipes that specified item is part of. */
    static function getRecipesForIngredient(int itemTypeId) returns LinkedList<ItemRecipe>
        if recipeMap.has(itemTypeId)
            return recipeMap.get(itemTypeId)
        return null

    /** Returns recipes that can be assembled by casting specified ability. */
    static function getRecipesForAbility(int abilityId) returns LinkedList<ItemRecipe>
        if recipeMap.has(abilityId)
            return recipeMap.get(abilityId)
        return null

    /** Starts single-reference counted batch. Allows to assign multiple items to the same item slot. */
    function startBatch()
        if not batch
            batch = true

    /** Closes current batch. */
    function endBatch()
        if batch
            batch = false
            count++

    /** Retrieves id of ability thats triggers assembly of this recipe. */
    function getAbility() returns int
        return abilityId

    /** Sets or removes specified ability from triggering recipe assembly. */
    function setAbility(int abilityId)
        LinkedList<ItemRecipe> recipes

        if this.abilityId == abilityId
            return

        if this.abilityId != 0
            recipes = recipeMap.get(this.abilityId)
            recipes.remove(this)
            if recipes.isEmpty()
                destroy recipes
                recipeMap.remove(this.abilityId)

        if abilityId > 0
            this.abilityId = abilityId
            if not recipeMap.has(abilityId)
                recipes = new LinkedList<ItemRecipe>()
                recipes.push(this)
                recipeMap.put(abilityId, recipes)
            else
                recipes = recipeMap.get(abilityId)
                if not recipes.contains(this)
                    recipes.push(this)

    /** Removes all entries that match specified item type from recipe ingredient list. */
    function removeItem(int itemTypeId)
        if batch // removing item when batch is ongoing is forbidden
            return

        let iter = ingredients.iterator()
        boolean found = false

        while iter.hasNext()
            if iter.next().itemTypeId == itemTypeId
                var entry = iter.current
                var ingredient = entry.elem

                // Decrement count only if this item is not part of any batch
                if (entry.prev == iter.dummy or entry.prev.elem.index != ingredient.index) and
                   (entry.next == iter.dummy or entry.next.elem.index != ingredient.index)
                    count--

                iter.remove()
                found = true
                break
        iter.close()

        if found
            let recipes = recipeMap.get(itemTypeId)
            recipes.remove(this)
            if recipes.isEmpty()
                destroy recipes
                recipeMap.remove(itemTypeId)

    /** Adds new entry to recipe ingredient list. */
    function addItem(int itemTypeId, boolean remove, int charges)
        LinkedList<ItemRecipe> recipes
        int chrgs = charges

        if itemTypeId <= 0 or itemTypeId == reward
            return
        if count >= bj_MAX_INVENTORY and not batch
            return

        if not recipeMap.has(itemTypeId)
            recipes = new LinkedList<ItemRecipe>()
            recipes.push(this)
            recipeMap.put(itemTypeId, recipes)
        else
            recipes = recipeMap.get(itemTypeId)
            if not recipes.contains(this)
                recipes.push(this)

        if chrgs < 0
            chrgs = 0

        let ingredient = new RecipeIngredient(itemTypeId, remove, chrgs, count)
        ingredients.push(ingredient)
        if not batch
            count++

    /** Adds new entry to recipe ingredient list. */
    function addItem(int itemTypeId)
        addItem(itemTypeId, true, 0)

    private function orderedSearch(LinkedList<item> items) returns HashList<RecipeIngredient>
        int slot = 0
        boolean found
        item itm
        int charges
        RecipeIngredient ingredient
        int idx
        let resultIngredients = new HashList<RecipeIngredient>()

        let iter = ingredients.iterator()..next()
        while iter.current != iter.dummy // test() validated this.count against items size already
            found = false
            itm = items.get(slot)
            charges = itm.getCharges()
            ingredient = iter.current.elem
            idx = ingredient.index

            while ingredient.index == idx // treats each part of recipe as possible batch
                if itm.getTypeId() == ingredient.itemTypeId and charges >= ingredient.charges
                    resultIngredients.set(slot, new RecipeIngredient(ingredient))
                    found = true
                    break

                if iter..next().current == iter.dummy
                    break
                ingredient = iter.current.elem

            if not found
                destroy resultIngredients
                iter.close()
                return null
            else // seek node which is not part of this batch
                while ingredient.index == idx
                    if iter..next().current == iter.dummy
                        break // batch was the last piece of recipe
                    ingredient = iter.current.elem
            slot++
        iter.close()
        return resultIngredients

    private function unorderedSearch(LinkedList<item> items) returns HashList<RecipeIngredient>
        boolean found
        RecipeIngredient ingredient
        int idx
        int slot
        int size = items.size()
        item itm
        int itemTypeId
        int charges
        let resultIngredients = new HashList<RecipeIngredient>()

        let iter = ingredients.iterator()..next()
        while iter.current != iter.dummy
            found = false
            ingredient = iter.current.elem
            idx = ingredient.index

            // Attempt to find any matching items from given batch within items collection
            while ingredient.index == idx
                slot = 0
                while slot < size
                    if not resultIngredients.get(slot) == null
                        itm = items.get(slot)
                        itemTypeId = itm.getTypeId()
                        charges = itm.getCharges()

                        if itemTypeId == ingredient.itemTypeId and charges >= ingredient.charges
                            resultIngredients.set(slot, new RecipeIngredient(ingredient))
                            found = true
                            break
                    slot++

                if found
                    break
                if iter..next().current == iter.dummy
                    break
                ingredient = iter.current.elem

            if not found
                destroy resultIngredients
                iter.close()
                return null
            else // seek node which is not part of this batch
                while ingredient.index == idx
                    if iter..next().current == iter.dummy
                        break // batch was the last piece of recipe
                    ingredient = iter.current.elem
        iter.close()
        return resultIngredients

    /** Checks if recipe can be assembled for specified unit given the ingredients list. */
    function test(unit whichUnit, LinkedList<item> items) returns HashList<RecipeIngredient>
        if count <= 0 or count > items.size()
            return null
        if requirement != null and not requirement.filter(whichUnit)
            return null

        if ordered
            return orderedSearch(items)
        return unorderedSearch(items)

    /** Checks if recipe can be assembled for specified unit. */
    function test(unit whichUnit) returns HashList<RecipeIngredient>
        int size = whichUnit.inventorySize()
        let items = new LinkedList<item>()

        for slot = 0 to size - 1
            items.push(whichUnit.itemInSlot(slot))

        HashList<RecipeIngredient> result = test(whichUnit, items)
        destroy items
        return result

    /** Attempts to assemble recipe for specified unit given the ingredients list. */
    function assemble(unit whichUnit, LinkedList<item> fromItems) returns boolean
        int size = fromItems.size()
        RecipeIngredient ingredient
        item itm
        int chrgs

        let resultIngredients = test(whichUnit, fromItems)
        if resultIngredients == null
            return false

        itm = CreateItem(reward, whichUnit.getX(), whichUnit.getY())
        if charges > 0
            itm.setCharges(charges)
        fireEvent(this, whichUnit, itm, resultIngredients)

        for i = 0 to size - 1
            ingredient = resultIngredients.get(i)
            if ingredient != null
                itm = fromItems.get(i)
                if ingredient.charges > 0
                    chrgs = itm.getCharges()
                    if chrgs > ingredient.charges and not ingredient.perishable
                        itm.setCharges(chrgs - ingredient.charges)
                    else
                        itm.remove()
                else if ingredient.perishable
                    itm.remove()
        whichUnit.addItemHandle(itm)

        destroy resultIngredients
        return true

    /** Attempts to assemble recipe for specified unit. */
    function assemble(unit whichUnit) returns boolean
        int size = whichUnit.inventorySize()
        let items = new LinkedList<item>()

        for slot = 0 to size - 1
            items.push(whichUnit.itemInSlot(slot))

        boolean result = assemble(whichUnit, items)
        destroy items
        return result

    /** Reverts the assembly, removing the reward item and returning all ingredients to specified unit. */
    function disassemble(unit whichUnit) returns boolean
        int size = whichUnit.inventorySize()
        boolean found = false
        item itm = null

        if permanent
            return false

        for slot = 0 to size - 1
            itm = whichUnit.itemInSlot(slot)
            if itm.getTypeId() == reward
                found = true
                break
        if not found
            return false

        itm.remove()
        for ingredient in ingredients
            if ingredient.perishable
                itm = CreateItem(ingredient.itemTypeId, whichUnit.getX(), whichUnit.getY())
                if ingredient.charges > 0
                    itm.setCharges(ingredient.charges)
                whichUnit.addItemHandle(itm)
        return true

/** Attempts to assemble specified item type for provided unit. */
public function unit.assembleItem(int itemTypeId) returns boolean
    let recipes = ItemRecipe.getRecipes(itemTypeId)
    if recipes != null
        for recipe in recipes
            if recipe.assemble(this)
                return true
    return false

/** Reverts the assembly, removing the reward item and returning all ingredients to specified unit. */
public function unit.disassembleItem(item whichItem) returns boolean
    int itemTypeId = whichItem.getTypeId()
    let recipes = ItemRecipe.getRecipes(itemTypeId)

    if not this.hasItem(whichItem) or recipes == null
        return false
    // Disassembling item with multiple recipe variants is ambiguous
    if recipes.size() > 1
        return false

    return recipes.getFirst().disassemble(this)

function onPickup()
    unit u = GetTriggerUnit()
    item itm = GetManipulatedItem()
    int itemTypeId = itm.getTypeId()
    let recipes = ItemRecipe.getRecipesForIngredient(itemTypeId)

    if recipes != null
        for recipe in recipes
            if recipe.pickupable and recipe.assemble(u)
                break

function onMoved()
    unit u = getInventoryManipulatingUnit()
    item itm = getInventoryManipulatedItem()
    int itemTypeId = itm.getTypeId()
    let recipes = ItemRecipe.getRecipesForIngredient(itemTypeId)
    int size = u.inventorySize()

    if recipes != null
        let items = new LinkedList<item>()
        for slot = 0 to size - 1
            items.push(u.itemInSlot(slot))
        items.set(getInventorySlotFrom(), getInventorySwappedItem())
        items.set(getInventorySlotTo(), itm)

        for recipe in recipes
            if recipe.pickupable and recipe.assemble(u, items)
                break
        destroy items

function onCast()
    unit u = GetTriggerUnit()
    int abilityId = GetSpellAbilityId()
    let recipes = ItemRecipe.getRecipesForAbility(abilityId)

    if recipes != null
        for recipe in recipes
            if recipe.assemble(u)
                break

function getCheatRecipe(unit u, item itm) returns ItemRecipe
    int itemTypeId = itm.getTypeId()
    let recipes = ItemRecipe.getRecipesForIngredient(itemTypeId)

    if recipes == null
        return null

    let size = u.inventorySize()
    let items = new LinkedList<item>()

    for slot = 0 to size - 1
        items.push(u.itemInSlot(slot))
    items.push(itm)

    for recipe in recipes
        if recipe.pickupable and not recipe.ordered
            let ingredients = recipe.getIngredients()
            for ingredient in ingredients
                // At least one item has to removed, in order to fit recipe reward in
                if ingredient.perishable and recipe.test(u, items) != null
                    return recipe
    return null

function onSmoothPickup()
    unit u = getSmoothItemPickupUnit()
    item itm = getSmoothItemPickupItem()
    let recipe = getCheatRecipe(u, itm)

    if recipe == null
        return

    let size = u.inventorySize()
    let items = new LinkedList<item>()

    for slot = 0 to size - 1
        items.push(u.itemInSlot(slot))
    items.push(itm)
    recipe.assemble(u, items)

class RecipeSmoothPickupPredicate implements SmoothPickupPredicate
    function canPickup(unit whichUnit, item whichItem) returns boolean
        return whichUnit.isInventoryFull() and getCheatRecipe(whichUnit, whichItem) != null

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, () -> onPickup())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> onCast())
    registerInventoryEvent(EVENT_ITEM_INVENTORY.MOVE, () -> onMoved())

    // Allow for smooth pickup for pickup-type unordered recipes
    registerSmoothItemPickupEvent(() -> onSmoothPickup())
    addSmoothItemPickupCondition(new RecipeSmoothPickupPredicate())
