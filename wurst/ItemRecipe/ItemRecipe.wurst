/*
*  ItemRecipe v1.0.3.2
*     by Bannar
*
*  Powerful item recipe creator.
*/
package ItemRecipe
import HashMap
import HashList
import LinkedList
import RegisterEvents
import ItemRestriction
import InventoryEvent
import SmoothItemPickup

tuple eventInfo(ItemRecipe recipe, unit u, item itm, LinkedList<item> ingredients)

var eventState = eventInfo(null, null, null, null)
constant eventTrigger = CreateTrigger()

/** Returns triggering item recipe. */
public function getEventItemRecipe() returns ItemRecipe
    return eventState.recipe

/** Returns recipe triggering unit. */
public function getEventItemRecipeUnit() returns unit
    return eventState.u

/** Returns reward item for triggering recipe. */
public function getEventItemRecipeItem() returns item
    return eventState.itm

/** Returns collection of ingredients chosen to assemble the reward item,
    where each index corresponds to triggering unit inventory slot. */
public function getEventItemRecipeIngredients() returns LinkedList<item>
    return eventState.ingredients

/** Registers new event handler for item recipe event. */
public function registerItemRecipeEvent(code func)
    eventTrigger.addCondition(Condition(func))

/** Returns trigger handle associated with recipe event. */
public function getItemRecipeEventTrigger() returns trigger
    return eventTrigger

function fireEvent(eventInfo currState)
    var prevState = eventState
    eventState = currState
    eventTrigger.evaluate()
    eventState = prevState

/** Stores information about item required for recipe assembly. */
public class RecipeIngredient
    int itemTypeId
    boolean perishable
    int charges
    // If non 0, then it is part of a batch i.e multiple items can fill its spot
    int index

    construct(int itemTypeId, boolean perishable, int charges, int index)
        this.itemTypeId = itemTypeId
        this.perishable = perishable
        this.charges = charges
        this.index = index

    construct(thistype base)
        this.itemTypeId = base.itemTypeId
        this.perishable = base.perishable
        this.charges = base.charges
        this.index = base.index

/** Item recipe, collection of items that can be combined for powerful rewards. */
public class ItemRecipe
    int charges
    boolean ordered
    boolean permanent
    boolean pickupable
    UnitRequirement requirement = null

    private constant ingredients = new LinkedList<RecipeIngredient>()
    private int reward
    private var abilityId = 0
    private var count = 0
    private var batch = false
    // Global containers for associated recipe list retrieval
    private static constant instanceMap = new HashMap<int, LinkedList<ItemRecipe>>()

    private static function saveRecipe(int index, ItemRecipe recipe)
        if not instanceMap.has(index)
            instanceMap.put(index, new LinkedList<ItemRecipe>())
        var recipes = instanceMap.get(index)
        if not recipes.contains(recipe)
            recipes.push(recipe)

    private static function flushRecipe(int index, ItemRecipe recipe)
        var recipes = instanceMap.get(index)
        recipes.remove(recipe)
        if recipes.isEmpty()
            destroy recipes
            instanceMap.remove(index)

    private static function getRecipes(int index) returns LinkedList<ItemRecipe>
        LinkedList<ItemRecipe> result = null
        if instanceMap.has(index)
            result = instanceMap.get(index)
        return result

    /** Returns recipes which reward matches specified item type. */
    static function getRecipesForReward(int itemTypeId) returns LinkedList<ItemRecipe>
        return getRecipes(-itemTypeId)

    /** Returns recipes that specified item is part of. */
    static function getRecipesWithIngredient(int itemTypeId) returns LinkedList<ItemRecipe>
        return getRecipes(itemTypeId)

    /** Returns recipes that can be assembled by casting specified ability. */
    static function getRecipesWithAbility(int abilityId) returns LinkedList<ItemRecipe>
        return getRecipes(abilityId)

    construct(int reward, int charges, boolean ordered, boolean permanent, boolean pickupable)
        this.reward = reward
        this.charges = charges
        this.ordered = ordered
        this.permanent = permanent
        this.pickupable = pickupable
        saveRecipe(-reward, this)

    ondestroy
        setAbility(0)
        ingredients.forEach(e -> flushRecipe(e.itemTypeId, this))
        flushRecipe(-reward, this)
        destroy ingredients

    /** Number of items required for the recipe. */
    function count() returns int
        return count

    /** Returns shallow copy of item recipe data. */
    function getIngredients() returns LinkedList<RecipeIngredient>
        return ingredients.copy()

    /** Returns reward item type. */
    function getReward() returns int
        return reward

    /** Retrieves id of ability thats triggers assembly of this recipe. */
    function getAbility() returns int
        return abilityId

    /** Whether specified item type is a part of the recipe. */
    function isIngredient(int itemTypeId) returns boolean
        var result = false
        for ingredient from ingredients.staticItr()
            if ingredient.itemTypeId == itemTypeId
                result = true
                break
        return result

    /** Starts single-reference counted batch. Allows to assign multiple items to the same item slot. */
    function startBatch()
        if not batch
            batch = true

    /** Closes current batch. */
    function endBatch()
        if batch
            batch = false
            count++

    /** Sets or removes specified ability from triggering recipe assembly. */
    function setAbility(int abilityId)
        if this.abilityId != abilityId
            if this.abilityId != 0
                flushRecipe(abilityId, this)
            if abilityId > 0
                this.abilityId = abilityId
                saveRecipe(abilityId, this)

    /** Removes all entries that match specified item type from recipe ingredient list. */
    function removeItem(int itemTypeId)
        if not batch // removing item when batch is ongoing is forbidden
            var iter = ingredients.iterator()
            var found = false

            for ingredient from iter
                if ingredient.itemTypeId == itemTypeId
                    var entry = iter.current
                    // Decrement count only if this item is not part of any batch
                    if (entry.prev == iter.dummy or entry.prev.elem.index != ingredient.index) and
                       (entry.next == iter.dummy or entry.next.elem.index != ingredient.index)
                        count--
                    iter.remove()
                    found = true
            iter.close()
            if found
                flushRecipe(itemTypeId, this)

    /** Adds new entry to recipe ingredient list. */
    function addItem(int itemTypeId, boolean perishable, int charges)
        if itemTypeId != reward
            var ingredient = new RecipeIngredient(itemTypeId, perishable, max(charges, 0), count)
            ingredients.push(ingredient)
            if not batch
                count++
            saveRecipe(itemTypeId, this)

    /** Adds new entry to recipe ingredient list. */
    function addItem(int itemTypeId)
        addItem(itemTypeId, true, 0)

    private function orderedSearch(LinkedList<item> items) returns HashList<RecipeIngredient>
        var result = new HashList<RecipeIngredient>
        var iter = ingredients.iterator()
        var slot = 0

        while iter.hasNext() // test() validated this.count against items size already
            var found = false
            var ingredient = iter.next()
            var idx = ingredient.index
            var itm = items.get(slot)
            var charges = itm.getCharges()

            while ingredient.index == idx // treats each part of recipe as possible batch
                if itm.getTypeId() == ingredient.itemTypeId and charges >= ingredient.charges
                    result.set(slot, new RecipeIngredient(ingredient))
                    found = true
                    break
                if not iter.hasNext()
                    break
                ingredient = iter.next()

            if not found
                destroy result
                result = null
                break
            // Seek node which is not part of this batch
            while iter.hasNext()
                if iter.lookahead().index != idx
                    break // batch was the last piece of recipe
                iter.next()
            slot++
        iter.close()
        return result

    private function unorderedSearch(LinkedList<item> items) returns HashList<RecipeIngredient>
        var result = new HashList<RecipeIngredient>()
        var iter = ingredients.iterator()
        var last = items.size() - 1

        while iter.hasNext()
            var found = false
            var ingredient = iter.next()
            var idx = ingredient.index

            // Attempt to find any matching items from given batch within items collection
            while ingredient.index == idx
                for slot = 0 to last
                    if result.get(slot) == null
                        var itm = items.get(slot)
                        var itemTypeId = itm.getTypeId()
                        var charges = itm.getCharges()

                        if itemTypeId == ingredient.itemTypeId and charges >= ingredient.charges
                            result.set(slot, new RecipeIngredient(ingredient))
                            found = true
                            break
                if found or not iter.hasNext()
                    break
                ingredient = iter.next()

            if not found
                destroy result
                result = null
                break
            // Seek node which is not part of this batch
            while iter.hasNext()
                if iter.lookahead().index != idx
                    break // batch was the last piece of recipe
                iter.next()
        iter.close()
        return result

    /** Checks if recipe can be assembled for specified unit given the ingredients list. */
    function test(unit whichUnit, LinkedList<item> items) returns HashList<RecipeIngredient>
        HashList<RecipeIngredient> result = null

        if count > 0 and items.size() >= count
            if requirement == null or requirement.filter(whichUnit)
                if ordered
                    result = orderedSearch(items)
                else
                    result = unorderedSearch(items)
        return result

    /** Checks if recipe can be assembled for specified unit. */
    function test(unit whichUnit) returns HashList<RecipeIngredient>
        var last = whichUnit.inventorySize() - 1
        var items = new LinkedList<item>()

        for slot = 0 to last
            items.push(whichUnit.itemInSlot(slot))
        var result = test(whichUnit, items)

        destroy items
        return result

    /** Attempts to assemble recipe for specified unit given the ingredients list. */
    function assemble(unit whichUnit, LinkedList<item> fromItems) returns boolean
        var fromIngredients = test(whichUnit, fromItems)
        if fromIngredients == null
            return false

        var rewardItm = createItem(reward, whichUnit.getPos())
        if charges > 0
            rewardItm.setCharges(charges)

        var usedItems = new LinkedList<item>()
        var last = fromItems.size() - 1
        for i = 0 to last
            if fromIngredients.get(i) != null
                usedItems.push(fromItems.get(i))

        fireEvent(eventInfo(this, whichUnit, rewardItm, usedItems))

        for i = 0 to last
            var ingredient = fromIngredients.get(i)
            if ingredient != null
                var itm = fromItems.get(i)
                if ingredient.charges > 0
                    if itm.getCharges() > ingredient.charges and not ingredient.perishable
                        itm.setCharges(itm.getCharges() - ingredient.charges)
                    else
                        itm.remove()
                else if ingredient.perishable
                    itm.remove()
        whichUnit.addItemHandle(rewardItm)

        destroy fromIngredients
        destroy usedItems
        return true

    /** Attempts to assemble recipe for specified unit. */
    function assemble(unit whichUnit) returns boolean
        var last = whichUnit.inventorySize() - 1
        var items = new LinkedList<item>()

        for slot = 0 to last
            items.push(whichUnit.itemInSlot(slot))
        var result = assemble(whichUnit, items)

        destroy items
        return result

    /** Reverts the assembly, removing the reward item and returning all ingredients to specified unit. */
    function disassemble(unit whichUnit) returns boolean        
        if permanent
            return false
        var last = whichUnit.inventorySize() - 1
        var result = false

        for slot = 0 to last
            var itm = whichUnit.itemInSlot(slot)
            if itm.getTypeId() == reward
                itm.remove()

                for ingredient in ingredients
                    if ingredient.perishable
                        itm = createItem(ingredient.itemTypeId, whichUnit.getPos())
                        if ingredient.charges > 0
                            itm.setCharges(ingredient.charges)
                        whichUnit.addItemHandle(itm)
                result = true
                break
        return result

/** Attempts to assemble specified item type for provided unit. */
public function unit.assembleItem(int itemTypeId) returns boolean
    var result = false
    var recipes = ItemRecipe.getRecipesForReward(itemTypeId)
    if recipes != null
        for recipe in recipes
            if recipe.assemble(this)
                result = true
                break
    return result

/** Reverts the assembly, removing the reward item and returning all ingredients to specified unit. */
public function unit.disassembleItem(item whichItem) returns boolean
    var result = false
    if this.hasItem(whichItem)
        var recipes = ItemRecipe.getRecipesForReward(whichItem.getTypeId())
        // Disassembling item with multiple recipe variants is ambiguous
        if recipes != null and recipes.size() == 1
            result = recipes.getFirst().disassemble(this)
    return result

function onPickup()
    var itemTypeId = GetManipulatedItem().getTypeId()
    var recipes = ItemRecipe.getRecipesWithIngredient(itemTypeId)

    if recipes != null
        var u = GetTriggerUnit()
        for recipe in recipes
            if recipe.pickupable and recipe.assemble(u)
                break

function onMoved()
    var itm = getInventoryManipulatedItem()
    var recipes = ItemRecipe.getRecipesWithIngredient(itm.getTypeId())

    if recipes != null
        var u = getInventoryManipulatingUnit()
        var last = u.inventorySize() - 1
        var items = new LinkedList<item>()

        for slot = 0 to last
            items.push(u.itemInSlot(slot))
        items.set(getInventorySlotFrom(), getInventorySwappedItem())
        items.set(getInventorySlotTo(), itm)

        for recipe in recipes
            if recipe.pickupable and recipe.assemble(u, items)
                break
        destroy items

function onCast()
    var recipes = ItemRecipe.getRecipesWithAbility(GetSpellAbilityId())
    if recipes != null
        var u = GetTriggerUnit()
        for recipe in recipes
            if recipe.assemble(u)
                break

function getCheatRecipe(unit u, item itm) returns ItemRecipe
    var recipes = ItemRecipe.getRecipesWithIngredient(itm.getTypeId())
    if recipes == null
        return null

    var last = u.inventorySize() - 1
    var items = new LinkedList<item>()
    for slot = 0 to last
        items.push(u.itemInSlot(slot))
    items.push(itm)

    ItemRecipe result = null
    for recipe in recipes
        if recipe.pickupable and not recipe.ordered
            for ingredient in recipe.getIngredients()
                // At least one item has to removed, in order to fit recipe reward in
                if ingredient.perishable and recipe.test(u, items) != null
                    result = recipe
                    break
    destroy items
    return result

function onSmoothPickup()
    var u = getSmoothItemPickupUnit()
    var itm = getSmoothItemPickupItem()
    var recipe = getCheatRecipe(u, itm)

    if recipe != null
        var last = u.inventorySize() - 1
        var items = new LinkedList<item>()

        for slot = 0 to last
            items.push(u.itemInSlot(slot))
        items.push(itm)
        recipe.assemble(u, items)

class SmoothRecipeAssemly implements SmoothPickupPredicate
    function canPickup(unit whichUnit, item whichItem) returns boolean
        return whichUnit.isInventoryFull() and getCheatRecipe(whichUnit, whichItem) != null

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, () -> onPickup())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> onCast())
    registerInventoryEvent(EVENT_ITEM_INVENTORY.MOVE, () -> onMoved())

    // Allow for smooth pickup for pickup-type unordered recipes
    registerSmoothItemPickupEvent(() -> onSmoothPickup())
    addSmoothItemPickupCondition(new SmoothRecipeAssemly())
