/*
*  StackNSplit v1.1.1.5
*     by Bannar
*
*  Easy item charges stacking and splitting.
*/
package StackNSplit
import RegisterEvents
import InventoryEvent
import SmoothItemPickup
import LinkedList

hashtable table = InitHashtable()
// Event related globals
unit eventUnit = null
item eventItem = null
int eventCharges = -1
trigger eventAddedTrigger = CreateTrigger()
trigger eventRemovedTrigger = CreateTrigger()

public constant int EVENT_ITEM_CHARGES_ADDED = 1
public constant int EVENT_ITEM_CHARGES_REMOVED = 2

/** Returns unit which manupilated event item. */
public function getItemStackingUnit() returns unit
    return eventUnit

/** Returns manipulated event item. */
public function getItemStackingItem() returns item
    return eventItem

/** Returns number of charges that has been added or removed. */
public function getItemStackingCharges() returns int
    return eventCharges

/** Returns trigger handle associated with specified item stacking event. */
public function getItemStackingEventTrigger(int whichEvent) returns trigger
    if whichEvent == EVENT_ITEM_CHARGES_ADDED
        return eventAddedTrigger
    else if whichEvent == EVENT_ITEM_CHARGES_REMOVED
        return eventRemovedTrigger
    return null

/** Registers new event handler for specified item stacking event. */
public function registerItemStackingEvent(int whichEvent, code cb)
    if whichEvent == EVENT_ITEM_CHARGES_ADDED
        eventAddedTrigger.addCondition(Condition(cb))
    else if whichEvent == EVENT_ITEM_CHARGES_REMOVED
        eventRemovedTrigger.addCondition(Condition(cb))

/** Returns value indicating whether specifed item is stackable or not. */
public function isItemContainer(int containerType) returns boolean
    return table.hasInt(3, containerType)

/** Returns maximum number of charges for specified container. */
public function getItemContainerMaxStacks(int containerType) returns int
    if isItemContainer(containerType)
        return table.loadInt(0, containerType)
    return -1

/** Returns item type assigned to specified container as its elements. */
public function getItemContainerSplitCount(int containerType) returns int
    if isItemContainer(containerType)
        return table.loadInt(1, containerType)
    return -1

/** Returns item type assigned to specified container as its elements. */
public function getItemContainerItem(int containerType) returns int
    if isItemContainer(containerType)
        return table.loadInt(3, containerType)
    return 0

/** Number of charges that container cannot go below during split operation. */
public function getItemContainerMinCharges(int containerType) returns int
    if isItemContainer(containerType)
        return table.loadInt(4, containerType)
    return -1

/** Returns value indicating whether specifed item is stackable or not. */
public function isItemStackable(int elementType) returns boolean
    return not isItemContainer(elementType) and table.hasInt(0, elementType)

/** Retrieves maximum amount of stacks for specified item. */
public function getItemMaxStacks(int elementType) returns int
    if isItemStackable(elementType)
        return table.loadInt(0, elementType)
    return -1

/** Returns number of charges lost by specified item per split. */
public function getItemSplitCount(int elementType) returns int
    if isItemStackable(elementType)
        return table.loadInt(1, elementType)
    return -1

/** Indicates if specifed element type has container assigned to it. */
public function itemHasContainer(int elementType) returns boolean
    return table.hasInt(2, elementType)

/** Returns list of item types assigned to specified element as its containers. */
public function getItemContainers(int elementType) returns LinkedList<int>
    if itemHasContainer(elementType)
        return table.loadInt(2, elementType) castTo LinkedList<int>
    return null

/** Unregisters specified item from being stackable. */
public function makeItemUnstackable(int elementType)
    if isItemStackable(elementType)
        table.removeInt(0, elementType)
        table.removeInt(1, elementType)

/** Registers specified item as stackable. */
public function makeItemStackable(int elementType, int stacks, int splits) returns boolean
    if not isItemContainer(elementType) and stacks > 0
        int value = splits
        if value < 1
            value = 1

        table.saveInt(0, elementType, stacks)
        table.saveInt(1, elementType, value)
        return true
    return false

/** Unsets any container related data related to specified element item type. */
public function unsetItemContainer(int containerType)
    int elementType = getItemContainerItem(containerType)

    if elementType != 0
        table.removeInt(0, containerType)
        table.removeInt(1, containerType)
        table.removeInt(3, containerType)
        table.removeInt(4, containerType)

        // Remove containerType from containers list
        let containers = getItemContainers(elementType)
        containers.remove(containerType)
        if containers.isEmpty()
            destroy containers
            table.removeInt(2, elementType)

/** Sets specified containerType item type as container for item type elementType.
    Argument minCharges specifies number of charges that container item cannot
    go below during split operation. */
public function setItemContainer(int elementType, int containerType, int stacks, int splits, int minCharges) returns boolean
    if elementType == 0 or containerType == 0
        return false
    else if stacks <= 0 or elementType == containerType
        return false
    else if isItemContainer(elementType) or isItemContainer(containerType)
        return false
    else if isItemStackable(containerType)
        return false

    int value = splits
    if value < 1
        value = 1
    int charges = minCharges
    if charges < 0
        charges = 0

    var containers = getItemContainers(elementType)
    if containers == null
        containers = new LinkedList<int>()
        table.saveInt(2, elementType, containers castTo int)
    containers.push(containerType)

    table.saveInt(0, containerType, stacks)
    table.saveInt(1, containerType, value)
    table.saveInt(3, containerType, elementType)
    table.saveInt(4, containerType, charges)
    return true

/** Checks if unit inventory is fully stacked and no charges can be added. */
public function unit.isItemFullyStacked(int itemTypeId) returns boolean
    boolean result = true
    item itm

    if not this.isInventoryFull()
        return false
    else if isItemContainer(itemTypeId)
        return result

    int size = this.inventorySize()
    if itemHasContainer(itemTypeId)
        for containerType in getItemContainers(itemTypeId)
            int max = getItemContainerMaxStacks(containerType)
            if max > 0
                for slot = 0 to size - 1
                    itm = this.itemInSlot(slot)
                    if itm.getTypeId() == containerType and GetItemCharges(itm) < max
                        result = false
                        break

    if result and isItemStackable(itemTypeId)
        int max = getItemMaxStacks(itemTypeId)
        if max > 0
            for slot = 0 to size - 1
                itm = this.itemInSlot(slot)
                if itm.getTypeId() == itemTypeId and GetItemCharges(itm) < max
                    result = false
                    break
    return result

function fireEvent(trigger evt, unit u, item itm, int charges)
    unit prevUnit = eventUnit
    item prevItem = eventItem
    integer prevCharges = eventCharges

    eventUnit = u
    eventItem = itm
    eventCharges = charges

    evt.evaluate()

    eventUnit = prevUnit
    eventItem = prevItem
    eventCharges = prevCharges

function stackItem(unit u, item itm, item ignored, int withTypeId, int max) returns int
    int charges = itm.getCharges()
    int size = u.inventorySize()

    for slot = 0 to size - 1
        item with = u.itemInSlot(slot)
        if with != ignored and with.getTypeId() == withTypeId
            int withCharges = with.getCharges()

            if withCharges < max
                int diff = max - withCharges
                if diff >= charges
                    with.setCharges(withCharges + charges)
                    itm.remove()
                    fireEvent(eventAddedTrigger, u, with, charges)
                    charges = 0
                    break
                else
                    charges -= diff
                    with.setCharges(max)
                    itm.setCharges(charges)
                    fireEvent(eventRemovedTrigger, u, itm, diff)
                    fireEvent(eventAddedTrigger, u, with, diff)
    return charges

/** Attempts to stack provided item for specified unit. */
public function unit.stackItem(item whichItem) returns boolean
    int charges = whichItem.getCharges()
    int itemTypeId = whichItem.getTypeId()
    boolean result = false
    int max

    if charges == 0
        return result

    if isItemContainer(itemTypeId)
        max = getItemContainerMaxStacks(itemTypeId)
        stackItem(this, whichItem, whichItem, getItemContainerItem(itemTypeId), max)
        return true
    else if itemHasContainer(itemTypeId)
        for containerType in getItemContainers(itemTypeId)
            max = getItemContainerMaxStacks(containerType)
            charges = stackItem(this, whichItem, whichItem, containerType, max)
            if charges == 0
                break
        result = true

    if isItemStackable(itemTypeId) and charges > 0
        max = getItemMaxStacks(itemTypeId)
        stackItem(this, whichItem, whichItem, itemTypeId, max)
        result = true
    return result

/** Attempts to split provided item for specified unit. */
public function unit.splitItem(item whichItem) returns boolean
    int charges = whichItem.getCharges()
    int itemTypeId = whichItem.getTypeId()
    int elementType
    int toSplit
    int minCharges = 1
    int max

    if isItemContainer(itemTypeId)
        minCharges = getItemContainerMinCharges(itemTypeId)
        if charges <= minCharges
            return false

        elementType = getItemContainerItem(itemTypeId)
        toSplit = getItemContainerSplitCount(itemTypeId)
    else if isItemStackable(itemTypeId) and charges > minCharges
        elementType = itemTypeId
        toSplit = getItemSplitCount(itemTypeId)
    else
        return false

    if toSplit >= charges
        toSplit = charges - minCharges
    whichItem.setCharges(charges - toSplit)
    fireEvent(eventRemovedTrigger, this, whichItem, toSplit)
    item with = CreateItem(elementType, this.getX(), this.getY())
    with.setCharges(toSplit)

    // Redistribute splitted stacks if possible
    if itemHasContainer(elementType)
        for containerType in getItemContainers(elementType)
            max = getItemContainerMaxStacks(containerType)
            toSplit = stackItem(this, with, whichItem, containerType, max)
            if toSplit == 0
                break
    if isItemStackable(elementType) and toSplit > 0
        max = getItemMaxStacks(elementType)
        toSplit = stackItem(this, with, whichItem, elementType, max)

    if toSplit > 0 // something is left
        trigger t = getPlayerUnitEventTrigger(EVENT_PLAYER_UNIT_PICKUP_ITEM)
        t.disable()
        this.addItemHandle(with)
        t.enable()
    return true

function pickupItem(unit u, item itm)
    int itemTypeId = itm.getTypeId()

    if isItemContainer(itemTypeId)
        int max = getItemContainerMaxStacks(itemTypeId)
        int elementType = getItemContainerItem(itemTypeId)
        int charges = itm.getCharges()
        int size = u.inventorySize()

        for slot = 0 to size - 1
            if charges >= max
                break
            item with = u.itemInSlot(slot)
            int withCharges = with.getCharges()

            if with != itm and withCharges > 0 and with.getTypeId() == elementType
                if charges + withCharges > max
                    int diff = max - charges
                    itm.setCharges(max)
                    with.setCharges(withCharges - diff)
                    fireEvent(eventRemovedTrigger, u, with, diff)
                    fireEvent(eventAddedTrigger, u, itm, diff)
                    break
                else
                    charges += withCharges
                    itm.setCharges(charges)
                    with.remove()
                    fireEvent(eventAddedTrigger, u, itm, withCharges)
    else
        u.stackItem(itm)

function onPickup()
    pickupItem(GetTriggerUnit(), GetManipulatedItem())

function onMoved()
    unit u = getInventoryManipulatingUnit()
    item itm = getInventoryManipulatedItem()
    int slotFrom = getInventorySlotFrom()
    int itemTypeId = itm.getTypeId()
    int max = 0

    if slotFrom == getInventorySlotTo() // splitting
        u.splitItem(itm)
    else if not isItemContainer(itemTypeId)
        int charges = itm.getCharges()
        item swapped = getInventorySwappedItem()
        int swappedTypeId = swapped.getTypeId()
        int swappedCharges = swapped.getCharges()

        if charges > 0
            if swappedTypeId == itemTypeId and swappedCharges > 0
                max = getItemMaxStacks(itemTypeId)
            else if getItemContainerItem(swappedTypeId) == itemTypeId
                max = getItemContainerMaxStacks(swappedTypeId)

        if max > 0
            int total = charges + swappedCharges
            if total > max
                if swappedCharges < max // if not met, allow for standard replacement action
                    trigger t = getPlayerUnitEventTrigger(EVENT_PLAYER_UNIT_DROP_ITEM)
                    t.disable()
                    itm.remove() // Remove the item to prevent item swap from occurring
                    t.enable()
                    t = getPlayerUnitEventTrigger(EVENT_PLAYER_UNIT_PICKUP_ITEM)
                    t.disable()
                    u.addItemToSlot(itemTypeId, slotFrom) // Create and add new item replacing removed one
                    t.enable()

                    itm = u.itemInSlot(slotFrom)
                    itm.setCharges(total - max)
                    swapped.setCharges(max)
                    int diff = max - charges
                    fireEvent(eventRemovedTrigger, u, itm, diff)
                    fireEvent(eventAddedTrigger, u, swapped, diff)
            else
                swapped.setCharges(total)
                itm.remove()
                fireEvent(eventAddedTrigger, u, swapped, charges)

function onSmoothPickup()
    pickupItem(getSmoothItemPickupUnit(), getSmoothItemPickupItem())

class StackSmoothPickupPredicate implements SmoothPickupPredicate
    function canPickup(unit whichUnit, item whichItem) returns boolean
        int itemTypeId = whichItem.getTypeId()

        if isItemContainer(itemTypeId)
            return not whichUnit.isItemFullyStacked(getItemContainerItem(itemTypeId))
        if isItemStackable(itemTypeId)
            return not whichUnit.isItemFullyStacked(itemTypeId)
        return false

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, () -> onPickup())
    registerInventoryEvent(EVENT_ITEM_INVENTORY.MOVE, () -> onMoved())
    registerSmoothItemPickupEvent(() -> onSmoothPickup())
    addSmoothItemPickupCondition(new StackSmoothPickupPredicate())
