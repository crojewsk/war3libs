package InventoryEventTest
import InventoryEvent

function onInventoryMove()
    unit u = getInventoryManipulatingUnit()
    item itm = getInventoryManipulatedItem()
    item itmSwapped = getInventorySwappedItem()
    int slotFrom = getInventorySlotFrom()
    int slotTo = getInventorySlotTo()
    string s

    if itmSwapped != null
        s = u.getName() + " swapped " + itm.getName() + "[" + slotFrom.toString() + "] with "
        s = s + itmSwapped.getName() + "[" + slotTo.toString() + "]"
    else
        s = u.getName() + " moved " + itm.getName() + "[" + slotFrom.toString() + "] to slot " + slotTo.toString()

    ClearTextMessages()
    print(s)

function onInventoryUse()
    unit u = getInventoryManipulatingUnit()
    item itm = getInventoryManipulatedItem()
    int slotFrom = getInventorySlotFrom()
    string s

    s = u.getName() + " used " + itm.getName() + "[" + slotFrom.toString() + "]"
    ClearTextMessages()
    print(s)

function start()
    player p = GetLocalPlayer()
    real x = -200//GetCameraTargetPositionX()
    real y = -200///GetCameraTargetPositionY()

    // boots
    CreateItem('bspd', x, y)
    // crystall ball
    CreateItem('crys', x, y)
    // inferno
    CreateItem('infs', x, y)
    // claws of attack
    CreateItem('ratc', x, y)

    CreateUnit(p, 'Hpal', x, y, 0)
    GetExpiredTimer().destr()

init
    registerInventoryEvent(EVENT_INVENTORY_MOVED, () -> onInventoryMove())
    registerInventoryEvent(EVENT_INVENTORY_USED, () -> onInventoryUse())
    CreateTimer().start(1, () -> start())
